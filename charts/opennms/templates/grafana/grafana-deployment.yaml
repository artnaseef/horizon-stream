apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.Grafana.ServiceName }}
  name: {{ .Values.Grafana.ServiceName }}
  namespace: {{ .Values.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.Grafana.ServiceName }}
  template:
    metadata:
      labels:
        app: {{ .Values.Grafana.ServiceName }}
    spec:
      {{ if .Values.NodeRestrictions.Enabled }}
      tolerations:
        - effect: "NoSchedule"
          key: "{{ .Values.NodeRestrictions.Key }}"
          operator: "Equal"
          value: {{ .Values.NodeRestrictions.Value }}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: "{{ .Values.NodeRestrictions.Key }}"
                operator: In
                values:
                - {{ .Values.NodeRestrictions.Value }}
      {{ end }}
      volumes:
        - name: grafana-config
          secret:
            secretName: {{ .Values.Grafana.ServiceName }}
            defaultMode: 420
      containers:
        - name: {{ .Values.Grafana.ServiceName }}
          image: {{ .Values.Grafana.Image }}
          imagePullPolicy: {{ .Values.Grafana.ImagePullPolicy }}
          ports:
            - containerPort: {{ .Values.Grafana.Port }}
          volumeMounts:
            - name: grafana-config
              mountPath: "/etc/grafana/provisioning/datasources/default.yml"
              subPath: "default.yml"
            - name: grafana-config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: "grafana.ini"
            - name: grafana-config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboard.yml"
              subPath: "dashboard.yml"
            - name: grafana-config
              mountPath: "/usr/share/grafana/public/dashboards/opennms-entities.json"
              subPath: "opennms-entities.json"
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: {{ .Values.Grafana.Port }}
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            tcpSocket:
              port: {{ .Values.Grafana.Port }}
          resources:
            limits:
              cpu: "{{ .Values.Grafana.Resources.Limits.Cpu }}"
              memory: "{{ .Values.Grafana.Resources.Limits.Memory }}"
            requests:
              cpu: "{{ .Values.Grafana.Resources.Requests.Cpu }}"
              memory: "{{ .Values.Grafana.Resources.Requests.Memory }}"

          