apiVersion: v1
kind: Service
metadata:
  name: horizon-stream-core
  labels:
    run: my-horizon-stream-core
spec:
  type: ClusterIP
  ports:
    - port: 8101
      protocol: TCP
      name: ssh
    - port: 8181
      protocol: TCP
      name: http
    - port: 8990
      protocol: TCP
      name: grpc
  selector:
    run: my-horizon-stream-core
---
apiVersion: v1
kind: Service
metadata:
  name: horizon-stream-api
  labels:
    run: my-horizon-stream-api
spec:
  type: ClusterIP
  ports:
    - port: 9090
      protocol: TCP
      name: http
  selector:
    run: my-horizon-stream-api
---
apiVersion: v1
kind: Service
metadata:
  name: horizon-stream-notification
  labels:
    run: my-horizon-stream-notification
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http
  selector:
    run: my-horizon-stream-notification
---
apiVersion: v1
kind: Service
metadata:
  name: minion
  labels:
    run: my-minion
spec:
  type: ClusterIP
  ports:
    - port: 8201
      protocol: TCP
      name: ssh
    - port: 1162
      protocol: UDP
      name: snmp-trap
    - port: 1514
      protocol: UDP
      name: syslog
  selector:
    run: my-minion
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    run: my-zookeeper
spec:
  type: ClusterIP
  ports:
    - port: 2181
      protocol: TCP
      name: http
  selector:
    run: my-zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    run: my-kafka
spec:
  type: ClusterIP
  ports:
    - port: 9092
      protocol: TCP
      name: http
  selector:
    run: my-kafka
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    run: my-postgres
spec:
  type: ClusterIP
  ports:
    - port: 5432
      protocol: TCP
      name: http
  selector:
    run: my-postgres
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  labels:
    run: my-keycloak
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http
    - port: 8443
      protocol: TCP
      name: https
  selector:
    run: my-keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  labels:
    run: api-gateway
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      name: gateway-http
  selector:
    run: api-gateway
---
apiVersion: v1
kind: Service
metadata:
  name: mail-server
  labels:
    run: horizon-mail-server
spec:
  type: ClusterIP
  ports:
    - port: 8025
      protocol: TCP
      name: http
    - port: 1025
      protocol: TCP
      name: smtp
  selector:
    run: horizon-mail-server
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    run: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      protocol: TCP
      name: prometheus-port
  selector:
    run: prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-pushgateway
  labels:
    run: prometheus-pushgateway
spec:
  type: ClusterIP
  ports:
    - port: 9091
      protocol: TCP
      name: pushgateway-port
  selector:
    run: prometheus-pushgateway
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    run: grafana
spec:
  type: ClusterIP
  ports:
    - port: 3000
      protocol: TCP
      name: grafana-http
  selector:
    run: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  selector:
    matchLabels:
      run: grafana
  template:
    metadata:
      labels:
        run: grafana
    spec:
      volumes:
        - name: grafana-datasource
          configMap:
            name: grafana-config
        - name: grafana-ini
          configMap:
            name: grafana-config
        - name: grafana-dashboard
          configMap:
            name: grafana-config
      containers:
        - name: grafana
          image: opennms/grafana-dev
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-datasource
              mountPath: "/etc/grafana/provisioning/datasources/default.yml"
              subPath: "default.yml"
            - name: grafana-ini
              mountPath: "/etc/grafana/grafana.ini"
              subPath: "grafana.ini"
            - name: grafana-dashboard
              mountPath: "/etc/grafana/provisioning/dashboards/dashboard.yml"
              subPath: "dashboard.yml"
            - name: grafana-dashboard
              mountPath: "/usr/share/grafana/public/dashboards/opennms-entities.json"
              subPath: "opennms-entities.json"
      initContainers:
        - name: grafana-init-container
          image: boky/alpine-bootstrap
          command: ["wait-for-service", "-v", "postgres://grafana@postgres:5432"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-pushgateway
spec:
  selector:
    matchLabels:
      run: prometheus-pushgateway
  template:
    metadata:
      labels:
        run: prometheus-pushgateway
    spec:
      containers:
        - name: prometheus-pushgateway
          image: prom/pushgateway
          ports:
            - containerPort: 9091
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  selector:
    matchLabels:
      run: prometheus
  template:
    metadata:
      labels:
        run: prometheus
    spec:
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config-map
      containers:
        - name: prometheus
          image: prom/prometheus
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: "/etc/prometheus/prometheus.yml"
              subPath: "prometheus.yml"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: horizon-mail-server
spec:
  selector:
    matchLabels:
      run: horizon-mail-server
  template:
    metadata:
      labels:
        run: horizon-mail-server
    spec:
      containers:
        - name: mail-server
          image: mailhog/mailhog:latest
          ports:
            - containerPort: 8025
            - containerPort: 1025
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  selector:
    matchLabels:
      run: api-gateway
  template:
    metadata:
      labels:
        run: api-gateway
    spec:
      volumes:
        - name: nginx-conf-volume
          configMap:
            name: nginx-conf-template
      containers:
        - name: api-gateway
          image: nginx:1.21.6-alpine
          ports:
            - containerPort: 80
          env:
            - name: API_SERVER_URL
              value: "http://horizon-stream-api:9090"
            - name: KEYCLOAK_URL
              value: "http://keycloak:8080"
            - name: KEYCLOAK_REALM
              value: "opennms"
          volumeMounts:
            - name: nginx-conf-volume
              mountPath: "/etc/nginx/templates/default.conf.template"
              subPath: "default.conf.template"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-zookeeper
spec:
  selector:
    matchLabels:
      run: my-zookeeper
  replicas: 1
  template:
    metadata:
      labels:
        run: my-zookeeper
    spec:
      volumes:
        - name: zookeeper-volume
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.7
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "no"
            - name: ZOO_ENABLE_AUTH
              value: "yes"
            - name: ZOO_SERVER_USERS
              valueFrom:
                secretKeyRef:
                  name: zookeeper-secret
                  key: username
            - name: ZOO_SERVER_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: zookeeper-secret
                  key: password
            - name: ZOO_CLIENT_USER
              valueFrom:
                secretKeyRef:
                  name: zookeeper-secret
                  key: username
            - name: ZOO_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: zookeeper-secret
                  key: password
          ports:
            - containerPort: 2181
          volumeMounts:
            - mountPath: /bitnami/zookeeper
              name: zookeeper-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-kafka
spec:
  selector:
    matchLabels:
      run: my-kafka
  replicas: 1
  template:
    metadata:
      labels:
        run: my-kafka
    spec:
      volumes:
        - name: kafka-volume
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:3
          env:
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ZOOKEEPER_PROTOCOL
              value: "SASL"
            - name: KAFKA_ZOOKEEPER_USER
              valueFrom:
                secretKeyRef:
                  name: zookeeper-secret
                  key: username
            - name: KAFKA_ZOOKEEPER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: zookeeper-secret
                  key: password
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: "CLIENT:PLAINTEXT,LOCALCLIENT:PLAINTEXT"
            - name: KAFKA_CFG_LISTENERS
              value: "CLIENT://:9092,LOCALCLIENT://:59092"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "CLIENT://kafka:9092,LOCALCLIENT://localhost:59092"
            - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
              value: "CLIENT"
            - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_CLIENT_USERS
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: username
            - name: KAFKA_CLIENT_PASSWORDS
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: password
          ports:
            - name: client
              protocol: TCP
              containerPort: 9092
            - name: local-client
              protocol: TCP
              containerPort: 59092
          volumeMounts:
            - mountPath: /bitnami/kafka
              name: kafka-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-postgres
spec:
  selector:
    matchLabels:
      run: my-postgres
  replicas: 1
  template:
    metadata:
      labels:
        run: my-postgres
    spec:
      volumes:
        - name: postgres-volume
        - name: postgres-grafana-init-script
          configMap:
            name: postgres-grafana-initial-sql
        - name: postgres-keycloak-initial-script
          configMap:
            name: postgres-keycloak-initial-sql
        - name: postgres-notification-initial-script
          configMap:
            name: postgres-notification-initial-sql
      containers:
        - name: postgres
          image: postgres:13.3-alpine
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-admin-secret
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-admin-secret
                  key: password
            - name: POSTGRES_HOST_AUTH_METHOD
              value: "trust"
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: "/var/lib/postgresql/data"
              name: postgres-volume
            - mountPath: "/docker-entrypoint-initdb.d/postgres.grafana.init.sql"
              name: postgres-grafana-init-script
              subPath: "postgres.grafana.init.sql"
            - mountPath: "/docker-entrypoint-initdb.d/postgres.keycloak.initial.script.sql"
              name: postgres-keycloak-initial-script
              subPath: "postgres.keycloak.initial.script.sql"
            - mountPath: "/docker-entrypoint-initdb.d/postgres.notification.initial.script.sql"
              name: postgres-notification-initial-script
              subPath: "postgres.notification.initial.script.sql"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-keycloak
spec:
  selector:
    matchLabels:
      run: my-keycloak
  replicas: 1
  template:
    metadata:
      labels:
        run: my-keycloak
    spec:
      containers:
        - name: keycloak
          image: opennms/horizon-stream-keycloak-dev
          args: [ "start-dev" ]
          env:
            - name: KEYCLOAK_CREATE_ADMIN_USER
              value: "true"
            - name: KEYCLOAK_ADMIN
              value: "keycloak-admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: "admin"
            - name: KEYCLOAK_DATABASE_HOST 
              value: "postgres"
            - name: KEYCLOAK_DATABASE_USER
              value: "postgres"
            - name: KEYCLOAK_DATABASE_PASSWORD
              value: "unused"
            - name: KC_DB
              value: postgres
            - name: KC_DB_URL
              value: jdbc:postgresql://postgres/keycloak
            #
            # TODO: use keycloak user (and password) instead of the admin "postgres" user
            #
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-admin-secret
                  key: username
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-admin-secret
                  key: password
          ports:
            - containerPort: 8080
            - containerPort: 8443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-horizon-stream-core
spec:
  selector:
    matchLabels:
      run: my-horizon-stream-core
  replicas: 1
  template:
    metadata:
      labels:
        run: my-horizon-stream-core
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: camel-config
        - name: users-volume
          secret:
            secretName: karaf-users-secret
      containers:
        - name: horizon-stream-core
          image: opennms/horizon-stream-core
          imagePullPolicy: Never
          args: [ "-f" ]
          env:
            - name: JAVA_TOOL_OPTIONS # Presence of this var lets `skaffold debug` see that this is a jvm container
              value: "-agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y" # Permanent debug port in `skaffold dev`
            - name: PGSQL_SERVICE_NAME
              value: "postgres"
            - name: PGSQL_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-admin-secret
                  key: username
            - name: PGSQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-admin-secret
                  key: password
            - name: PGSQL_USERNAME
              value: "opennms"
            - name: PGSQL_PASSWORD
              value: ""
            - name: KAFKA_BROKER_HOST
              value: "kafka"
            - name: KAFKA_BROKER_PORT
              value: "9092"
            - name: NOTIFICATION_KAFKA_TOPIC
              value: "org.opennms.horizon.notifications.alarms"
            - name: ACTIVEMQ_BROKER_URL
              value: "tcp://localhost:61616"
            - name: KEYCLOAK_BASE_URL
              value: "http://keycloak:8080"
            - name: KEYCLOAK_ADMIN_USERNAME
              value: "keycloak-admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: "admin"
            - name: PROMETHEUS_PUSHGATEWAY_URL
              value: "http://prometheus-pushgateway:9091"
          ports:
            - containerPort: 8101
            - containerPort: 8181
            - containerPort: 8990
          volumeMounts:
            - name: config-volume
              mountPath: "/opt/horizon-stream/etc/org.opennms.horizon.alarmd.camel.cfg"
              subPath: "useKafka"
            - name: config-volume
              mountPath: "/opt/horizon-stream/etc/org.opennms.horizon.eventd.camel.cfg"
              subPath: "useKafka"
            - name: users-volume
              mountPath: "/opt/horizon-stream/etc/users.properties"
              subPath: "data"
              readOnly: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-horizon-stream-api
spec:
  selector:
    matchLabels:
      run: my-horizon-stream-api
  replicas: 1
  template:
    metadata:
      labels:
        run: my-horizon-stream-api
    spec:
      containers:
        - name: horizon-stream-api
          image: opennms/horizon-stream-api
          imagePullPolicy: Never
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y" # Permanent debug port in `skaffold dev`
            - name: SPRING_CACHE_CAFFEINE_SPEC
              value: "maximumSize=10000,expireAfterWrite=60s"
            - name: HORIZON_STREAM_CORE_URL
              value: "http://horizon-stream-core:8181"
            - name: HORIZON_STREAM_NOTIFICATIONS_URL
              value: "http://horizon-stream-notification:8080"
            - name: TSDB_URL
              value: "http://prometheus:9090/api/v1/query"
          ports:
            - containerPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-horizon-stream-notification
spec:
  selector:
    matchLabels:
      run: my-horizon-stream-notification
  replicas: 1
  template:
    metadata:
      labels:
        run: my-horizon-stream-notification
    spec:
      containers:
        - name: horizon-stream-notification
          image: opennms/horizon-stream-notification
          imagePullPolicy: Never
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "-agentlib:jdwp=transport=dt_socket,server=y,address=5005,suspend=n,quiet=y" # Permanent debug port in `skaffold dev`
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: "kafka:9092"
          ports:
            - containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-minion
spec:
  selector:
    matchLabels:
      run: my-minion
  replicas: 1
  template:
    metadata:
      labels:
        run: my-minion
    spec:
      volumes:
        - name: minion-config-volume
          configMap:
            name: minion-config-map
      containers:
        - name: minion
          image: opennms/minion:29.0.10
          args: ["-f"]
          env:
            - name: KARAF_DEBUG
              value: "true"
            - name: TZ
              value: "America/New_York"
            - name: JAVA_MIN_MEM
              value: "512M"
            - name: JAVA_MAX_MEM
              value: "2048M"
            - name: PROMETHEUS_PUSHGATEWAY_URL
              value: "http://prometheus-pushgateway:9091"
          ports:
            - containerPort: 8201
            - containerPort: 1162
              protocol: UDP
            - containerPort: 1514
              protocol: UDP
#          livenessProbe:
#            exec:
#              command: ["/health.sh"]
#            initialDelaySeconds: 30
#            periodSeconds: 30
#            timeoutSeconds: 20
#            failureThreshold: 3
          volumeMounts:
            - name: minion-config-volume
              mountPath: "/opt/minion/minion-config.yaml"
              subPath: "minion-config.yaml"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-horizon-stream-ui
spec:
  selector:
    matchLabels:
      run: my-horizon-stream-ui
  template:
    metadata:
      labels:
        run: my-horizon-stream-ui
    spec:
      containers:
        - name: horizon-stream-ui
          image: opennms/horizon-stream-ui
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
data:
  grafana.ini: |
    [database]
    # You can configure the database connection by specifying type, host, name, user and password
    # as separate properties or as on string using the url properties.

    # Either "mysql", "postgres" or "sqlite3", it's your choice
    type = postgres
    host = postgres:5432
    name = grafana
    user = grafana
    # If the password contains # or ; you have to wrap it with triple quotes. Ex """#password;"""
    password = passw0rd
  default.yml: |
    apiVersion: 1
    
    datasources:
      - name: hs-metrics
        type: prometheus
        access: proxy
        orgId: 1
        url: http://prometheus:9090
        isDefault: false
        jsonData:
          httpHeaderName1: "X-Scope-OrgID"
        ## <string> json object of data that will be encrypted.
        secureJsonData:
          httpHeaderValue1: "{{ .Values.Namespace }}"
        version: 1
        # <bool> allow users to edit datasources from the UI.
        editable: false
  dashboard.yml: |
    apiVersion: 1
    
    providers:
      - name: "Horizon stream"
        orgId: 1
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: false
        options:
          path: "/usr/share/grafana/public/dashboards"
          foldersFromFilesStructure: true
  opennms-entities.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "gnetId": null,
      "graphTooltip": 0,
      "id": 1,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 17
          },
          "id": 2,
          "panels": [],
          "title": "Minions",
          "type": "row"
        },
        {
          "datasource": "hs-metrics",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 18
          },
          "id": 4,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "exemplar": true,
              "expr": "minion_response_time_msec",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "title": "Mininon Response Time",
          "type": "timeseries"
        },
        {
          "datasource": "hs-metrics",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 26
          },
          "id": 6,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "targets": [
            {
              "exemplar": true,
              "expr": "minion_uptime_sec",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "title": "Minion UP Time",
          "type": "timeseries"
        }
      ],
      "refresh": "1m",
      "schemaVersion": 32,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "brower",
      "title": "Horizon Stream"
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: camel-config
data:
  useKafka: |
    useSeda=false
    useKafka=true
    useActiveMq=false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-keycloak-initial-sql
data:
  postgres.keycloak.initial.script.sql: |
    CREATE USER keycloak with password 'passw0rd';
    CREATE DATABASE keycloak;
    GRANT ALL ON DATABASE keycloak TO keycloak;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-grafana-initial-sql
data:
  postgres.grafana.init.sql: |
    CREATE USER grafana with password 'passw0rd';
    CREATE DATABASE grafana;
    GRANT ALL ON DATABASE grafana TO grafana;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-notification-initial-sql
data:
  postgres.notification.initial.script.sql: |
    CREATE USER notification with password 'passw0rd';
    CREATE DATABASE notification;
    GRANT ALL ON DATABASE notification TO notification;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: minion-config-map
data:
  minion-config.yaml: |
    http-url: "http://horizon:8980/opennms"
    id: "minion-01"
    location: "Default"
    
    karaf:
      shell:
        ssh:
          host: "0.0.0.0"
    
    ipc:
      grpc:
        host: "horizon-stream-core"
        port: "8990"
    
    netmgt:
      syslog:
        syslog.listen.interface: "0.0.0.0"
        syslog.listen.port: 1514
    
      traps:
        trapd.listen.interface: "0.0.0.0"
        trapd.listen.port: 1162
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf-template
data:
  default.conf.template: |
    server {
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      listen       80;
      listen  [::]:80;
      server_name  localhost;
      
      set $cors_credentials '';
      set $cors_content_type '';
      set $cors_content_length '';
      if ($http_origin ~ '.+') {
        set $cors_credentials 'true';
      }

      if ($request_method = OPTIONS) {
        set $cors_content_type 'text/plain';
        set $cors_content_length '0';
      }

      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials $cors_credentials always;
      add_header Access-Control-Allow-Methods $http_access_control_request_method always;
      add_header Access-Control-Allow-Headers $http_access_control_request_headers always;
      add_header Content-Type $cors_content_type;
      add_header Content-Length $cors_content_length;
    
      if ($request_method = OPTIONS) {
        return 204;
      }

      location / {
        auth_request /verifytoken;
        auth_request_set $auth_status $upstream_status;
        proxy_pass ${API_SERVER_URL};
        proxy_hide_header Access-Control-Allow-Origin;
      }

      location /verifytoken {
    	internal;
    	proxy_pass ${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/userinfo;
    	proxy_pass_request_body off;
    	proxy_set_header Content-Length "";
      }

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
        root   /usr/share/nginx/html;
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config-map
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s # By default, scrape targets every 15 seconds.
    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'pushgateway'
        honor_labels: true
        # Override the global default and scrape targets from this job every 5 seconds.
        scrape_interval: 15s
        static_configs:
          - targets: ['prometheus-pushgateway:9091']
            labels:
              pushgateway_instance: horizon-core-pushgateway
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-admin-secret
type: Opaque
stringData:
  username: postgres
  password: passw0rd
---
apiVersion: v1
kind: Secret
metadata:
  name: zookeeper-secret
type: Opaque
stringData:
  username: zookeeper-user
  password: passw0rd
---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-secret
type: Opaque
stringData:
  username: kafka-user
  password: passw0rd
---
apiVersion: v1
kind: Secret
metadata:
  name: karaf-users-secret
type: Opaque
stringData:
  data: |
    admin=admin,_g_:admingroup
    _g_\:admingroup=group,admin,manager,viewer,systembundles,ssh
---
apiVersion: k8s.keycloak.org/v2alpha1
kind: KeycloakRealmImport
metadata:
  name: keycloak-realm-import-opennms
  labels:
    app: sso
spec:
  keycloakCRName: my-keycloak
  realm:
    accessTokenLifespan: 6000
    id: opennms
    realm: opennms
    enabled: true
    loginTheme: "horizon-stream"
    emailTheme: "horizon-stream"
    rememberMe: true
    resetPasswordAllowed: true
    attributes:
      frontendUrl: "http://localhost:28080"
    clients:
      - id: b67dfe9a-36c2-42bc-bd23-b380023d4238
        clientId: horizon-stream
        standardFlowEnabled: true
        enabled: true
        webOrigins:
          - "*"
        redirectUris:
          - "*"
        publicClient: true
        directAccessGrantsEnabled: true
        defaultClientScopes:
          - "web-origins"
          - "roles"
          - "profile"
          - "email"
        optionalClientScopes:
          - "address"
          - "phone"
          - "offline_access"
          - "microprofile-jwt"
    roles:
      realm:
      - id: 50e6b594-e01b-426b-873d-873f632355b4
        name: user
        composite: false
      - id: 76f0abc8-da17-4f57-8956-40cca624d62d
        name: admin
        composite: false
    users:
      - username: "admin"
        email: "admin@test.opennms.org"
        enabled: True
        emailVerified: False
        credentials:
          - type: "password"
            value: "admin"
        realmRoles:
          - "admin"
        clientRoles:
          account:
            - "manage-account"
            - "view-profile"
          realm-management:
            - "manage-users"
            - "view-users"
            - "query-users"
            - "create-client"
      - username: "user001"
        firstName: "User001"
        lastName: ""
        email: "user001@test.opennms.org"
        enabled: True
        emailVerified: False
        credentials:
          - type: "password"
            value: "passw0rd"
        realmRoles:
          - "user"
        clientRoles:
          account:
            - "manage-account"
            - "view-profile"
    smtpServer:
      auth: "false"
      host: "mail-server"
      port: "1025"
      user: "admin@horizion.stream.com"
      from: "admin@horizion.stream.com"
