<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
  xmlns:camel="http://camel.apache.org/schema/blueprint"
  xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
  xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

  <cm:property-placeholder persistent-id="org.opennms.horizon.provision.service" update-strategy="reload">
    <cm:default-properties>
      <cm:property name="quartz.threadpool.size" value="10"/>
    </cm:default-properties>
  </cm:property-placeholder>

  <camel:camelContext id="provisionCamelContext"  allowUseOriginalMessage="false">
    <camel:contextScan/>
  </camel:camelContext>

  <reference id="requisitionRepository" interface="org.opennms.netmgt.provision.persistence.model.RequisitionRepository"/>
  <reference id="foreignSourceRepository" interface="org.opennms.netmgt.provision.persistence.model.ForeignSourceRepository"/>
  <reference id="nodeRepository" interface="org.opennms.horizon.repository.api.NodeRepository"/>
  <reference id="grpcServer" interface="org.opennms.horizon.ipc.rpc.api.RpcClientFactory"/>
  <reference id="entityScopeProvider" interface="org.opennms.horizon.core.configvars.EntityScopeProvider"/>
  <reference id="igniteLocationAwareDetectorClient" interface="org.opennms.netmgt.provision.LocationAwareDetectorClient" filter="(type=ignite)"/>

  <bean id="provisioner" class="org.opennms.netmgt.provision.service.ProvisionerImpl">
    <argument ref="requisitionRepository"/>
    <argument ref="foreignSourceRepository"/>
    <argument ref="nodeRepository"/>
    <argument ref="nodeScanner"/>
  </bean>

  <bean id="serviceRegistry" class="org.opennms.core.soa.support.DefaultServiceRegistry"/>

  <bean id="detectorClientRpcModule" class="org.opennms.netmgt.provision.detector.client.DetectorClientRpcModule" />

  <bean id="serviceDetectorRegistry" class="org.opennms.netmgt.provision.ServiceDetectorRegistryImpl" init-method="afterPropertiesSet">
    <property name="m_serviceRegistry" ref="serviceRegistry"/>
    <property name="m_detectorFactories">
      <set>
        <bean class="org.opennms.netmgt.provision.detector.web.WebDetectorFactory"/>
      </set>
    </property>
  </bean>

  <bean id="customQuartz" class="org.apache.camel.component.quartz.QuartzComponent">
    <property name="properties">
      <map>
        <entry key="org.quartz.scheduler.instanceName" value="Scheduler"/>
        <entry key="org.quartz.scheduler.instanceId" value="AUTO"/>
        <entry key="org.quartz.scheduler.skipUpdateCheck" value="true"/>
        <entry key="org.quartz.scheduler.jobFactory.class" value="org.quartz.simpl.SimpleJobFactory"/>
        <entry key="org.quartz.threadPool.class" value="org.quartz.simpl.SimpleThreadPool"/>
        <entry key="org.quartz.threadPool.threadCount" value="${quartz.threadpool.size}"/>
      </map>
    </property>
  </bean>

  <bean id="nodeScanner" class="org.opennms.netmgt.provision.scan.NodeScanner">
    <argument ref="provisionCamelContext"/>
    <argument ref="igniteLocationAwareDetectorClient"/>
    <argument ref="foreignSourceRepository"/>
  </bean>

  <service ref="provisioner" interface="org.opennms.netmgt.provision.service.Provisioner"/>

</blueprint>
