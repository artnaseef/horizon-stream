<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
           xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0"

           xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		https://osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd

		http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0
		http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd

		http://camel.apache.org/schema/blueprint
		http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
">

    <ext:property-placeholder placeholder-prefix="$[" placeholder-suffix="]"/>

    <cm:property-placeholder id="trapsConsumerProperties"
                             persistent-id="org.opennms.horizon.traps.consumer"
                             update-strategy="reload">
        <cm:default-properties>
            <cm:property name="topic" value="traps"/>
            <cm:property name="kafkaBrokers" value="$[env:KAFKA_BROKER_HOST]:$[env:KAFKA_BROKER_PORT]"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <reference id="configService" interface="org.opennms.horizon.config.service.api.ConfigService"/>
    <reference id="eventConfDao" interface="org.opennms.horizon.events.api.EventConfDao"/>
    <reference id="eventForwarder" interface="org.opennms.horizon.events.api.EventForwarder" />
    <reference id="distPollerDao" interface="org.opennms.horizon.db.dao.api.DistPollerDao" />
    <reference id="interfaceToNodeCache" interface="org.opennms.horizon.db.dao.api.InterfaceToNodeCache" />
    <reference id="twinPublisher" interface="org.opennms.core.ipc.twin.api.TwinPublisher" availability="mandatory"/>
    <reference id="sessionUtils" interface="org.opennms.horizon.db.dao.api.SessionUtils" />
    <reference id="eventSubscriptionService" interface="org.opennms.horizon.events.api.EventSubscriptionService" availability="mandatory"/>
    <reference id="snmpHelper" interface="org.opennms.horizon.shared.snmp.SnmpHelper" />
    <reference id="taskSetGrpcClient" interface="org.opennms.taskset.service.api.TaskSetPublisher" filter="(type=grpc)"/>
    <reference id="taskSetManager" interface="org.opennms.horizon.taskset.manager.TaskSetManager"/>

    <bean id="trapSinkConsumer" class="org.opennms.horizon.traps.consumer.TrapSinkConsumer"
          init-method="init">
        <property name="eventConfDao" ref="eventConfDao"/>
        <property name="eventForwarder" ref="eventForwarder"/>
        <property name="distPollerDao" ref="distPollerDao"/>
        <property name="interfaceToNodeCache" ref="interfaceToNodeCache"/>
        <property name="configService" ref="configService"/>
        <property name="sessionUtils" ref="sessionUtils"/>
        <property name="eventSubscriptionService" ref="eventSubscriptionService"/>
        <property name="snmpHelper" ref="snmpHelper"/>
        <property name="taskSetPublisher" ref="taskSetGrpcClient"/>
        <property name="taskSetManager" ref="taskSetManager"/>
    </bean>

    <camelContext autoStartup="true" id="trapConsumerCamelContext" xmlns="http://camel.apache.org/schema/blueprint"
                  allowUseOriginalMessage="false">
        <propertyPlaceholder id="properties" location="blueprint:trapsConsumerProperties"/>

        <route id="consumeTrapsFromKafka">
            <from uri="kafka:{{topic}}?brokers={{kafkaBrokers}}&amp;valueDeserializer=org.apache.kafka.common.serialization.ByteArrayDeserializer"/>
            <unmarshal>
                <protobuf instanceClass="org.opennms.horizon.grpc.traps.contract.TrapLogDTO"/>
            </unmarshal>
            <process ref="trapSinkConsumer"/>
        </route>
    </camelContext>

</blueprint>
