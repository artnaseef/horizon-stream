<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.opennms.horizon</groupId>
    <artifactId>horizon</artifactId>
    <version>0.1.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>docker-it</artifactId>
  <name>OpenNMS Horizon :: Docker IT</name>
  <description>
    Docker build-time Integration Tests for the OpenNMS Horizon project.

    The docker-maven-plugin is used to spin up containers with the core project and PostgreSQL database, and exercise
    the public endpoints.
  </description>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.opennms.horizon</groupId>
        <artifactId>horizon-bom</artifactId>
        <version>0.1.0-SNAPSHOT</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.opennms.horizon.assemblies</groupId>
      <artifactId>docker</artifactId>
      <type>pom</type>
      <scope>test</scope>
      <version>${project.version}</version>
      <!-- Exclude all transitive dependencies; this dependency is only needed for build order, to ensure the -->
      <!--  docker image is built before building this module.                                                -->
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.opennms.horizon.3rdparty</groupId>
      <artifactId>keycloak-admin-client</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-java</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-picocontainer</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
    </dependency>

    <!--      -->
    <!-- JAXB -->
    <!--      -->
    <!-- TODO: version in the parent / BOM -->
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>2.3.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-core</artifactId>
      <version>2.3.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-impl</artifactId>
      <version>2.3.0</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>false</filtering>
      </testResource>
      <testResource>
        <directory>src/test/resources-filtered</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <plugins>

      <!--         -->
      <!--  DOCKER -->
      <!--         -->
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <configuration>
          <skip>${skipITs}</skip>
          <showLogs>true</showLogs>
          <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
          <images>

            <!--                -->
            <!-- POSTGRES IMAGE -->
            <!--                -->
            <image>
              <name>postgres-it-image</name>
              <alias>postgres-host</alias>
              <build>
                <!-- POSTGRES VERSION PROPERTY -->
                <from>postgres:13.3-alpine</from>
              </build>
              <run>
                <env>
                  <POSTGRES_HOST_AUTH_METHOD>trust</POSTGRES_HOST_AUTH_METHOD>
                </env>
                <ports>
                  <port>postgres-db-port:5432</port>
                </ports>
                <wait>
                  <log>(?s)PostgreSQL init process complete; ready for start up..*database system is ready to accept connections</log>
                </wait>
                <ports>
                  <port>postgresql.port:5432</port>
                </ports>
                <network>
                  <mode>custom</mode>
                  <name>alarm-docker-it-network</name>
                  <alias>postgres-host</alias>
                </network>
              </run>
            </image>

            <!--                -->
            <!-- KAFKA IMAGE -->
            <!--                -->
            <image>
              <name>kafka-it-image</name>
              <alias>kafka</alias>
              <build>
                <!-- POSTGRES VERSION PROPERTY -->
                <from>blacktop/kafka:2.6</from>
              </build>
              <run>
                <env>
                  <KAFKA_ADVERTISED_HOST_NAME>kafka-host</KAFKA_ADVERTISED_HOST_NAME>
                </env>
                <ports>
                  <port>kafka.port:9092</port>
                </ports>
                <wait>
                  <log>(?s)started \(kafka.server.KafkaServer\)</log>
                  <time>120000</time>
                </wait>
                <network>
                  <mode>custom</mode>
                  <name>alarm-docker-it-network</name>
                  <alias>kafka-host</alias>
                </network>
              </run>
            </image>

            <!--                -->
            <!-- KEYCLOAK IMAGE -->
            <!--                -->
            <image>
              <name>keycloak-it-image</name>
              <alias>keycloak</alias>
              <build>
                <from>quay.io/keycloak/keycloak:18.0.0</from>
              </build>
              <run>
                <!--<cmd>start-dev &#45;&#45;log-level=DEBUG,org.hibernate:INFO</cmd>-->
                <cmd>start-dev</cmd>
                <env>
                  <KEYCLOAK_CREATE_ADMIN_USER>true</KEYCLOAK_CREATE_ADMIN_USER>
                  <KEYCLOAK_ADMIN>keycloak-admin</KEYCLOAK_ADMIN>
                  <KEYCLOAK_ADMIN_PASSWORD>admin</KEYCLOAK_ADMIN_PASSWORD>

                  <KEYCLOAK_DATABASE_HOST>postgres-host</KEYCLOAK_DATABASE_HOST>
                  <KEYCLOAK_DATABASE_USER>postgres</KEYCLOAK_DATABASE_USER>
                  <KEYCLOAK_DATABASE_PASSWORD>unused</KEYCLOAK_DATABASE_PASSWORD>
                </env>
                <ports>
                  <port>keycloak-http.port:8080</port>
                  <port>keycloak-https.port:8443</port>
                </ports>
                <wait>
                  <log>Keycloak .* on JVM .* started in .* Listening on: http.*</log>
                  <time>120000</time>
                </wait>
                <network>
                  <mode>custom</mode>
                  <name>alarm-docker-it-network</name>
                  <alias>keycloak-host</alias>
                </network>
              </run>
            </image>

            <!--                    -->
            <!-- APPLICATION IMAGE  -->
            <!--                    -->
            <image>
              <name>opennms-horizon-application-it-image</name>
              <alias>application</alias>
              <build>
                <from>opennms/horizon-stream-core:local</from>
                <assembly>
                  <user>horizon-stream</user>
                  <targetDir>/</targetDir>

                  <inline xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                          xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                          xsi:schemaLocation="
                                             http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2
                                             http://maven.apache.org/xsd/assembly-1.1.2.xsd
                                             ">

                    <fileSets>
                      <fileSet>
                        <directory>${project.build.testOutputDirectory}/karaf/etc</directory>
                        <outputDirectory>/opt/horizon-stream/etc</outputDirectory>
                      </fileSet>
                    </fileSets>
                  </inline>
                </assembly>
                <cmd>
                  <arg>-f</arg>
                </cmd>
              </build>
              <run>
                <ports>
                  <port>karaf-ssh-port:8101</port>
                  <port>karaf-http-port:8181</port>
                  <!--<port>5005:5005</port>-->
                </ports>
                <env>
                  <!-- Need to make sure address=* is in the DEBUG OPTS otherwise it listens on the container's localhost only -->
                  <JAVA_OPTS>-Djava.security.egd=file:/dev/./urandom -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</JAVA_OPTS>
                  <PGSQL_SERVICE_NAME>postgres-host</PGSQL_SERVICE_NAME>
                  <PGSQL_ADMIN_USERNAME>postgres</PGSQL_ADMIN_USERNAME>
                  <PGSQL_ADMIN_PASSWORD>unused</PGSQL_ADMIN_PASSWORD>
                  <PGSQL_USERNAME>opennms</PGSQL_USERNAME>
                  <PGSQL_PASSWORD>unused</PGSQL_PASSWORD>
                  <KAFKA_BROKER_HOST>kafka-host</KAFKA_BROKER_HOST>
                  <KAFKA_BROKER_PORT>9092</KAFKA_BROKER_PORT>
                  <NOTIFICATION_KAFKA_TOPIC>org.opennms.horizon.notifications.alarms</NOTIFICATION_KAFKA_TOPIC>
                  <ACTIVEMQ_BROKER_URL>tcp://localhost:61616</ACTIVEMQ_BROKER_URL>
                </env>
                <wait>
                  <log>Blueprint bundle org.opennms.horizon.alarms.daemon/.* has been started</log>
                  <time>300000</time>
                </wait>
                <network>
                  <mode>custom</mode>
                  <name>alarm-docker-it-network</name>
                  <alias>application</alias>
                </network>
              </run>
            </image>

            <!--              -->
            <!-- MINION IMAGE -->
            <!--              -->
            <!-- NOTE: Minion must start AFTER application -->
            <image>
              <name>minion-it-image</name>
              <alias>minion</alias>
              <build>
                <from>opennms/minion:29.0.10</from>
                <assembly>
                  <user>minion</user>
                  <targetDir>/</targetDir>

                  <inline xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                          xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                          xsi:schemaLocation="
                                             http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2
                                             http://maven.apache.org/xsd/assembly-1.1.2.xsd
                                             ">

                    <fileSets>
                      <fileSet>
                        <directory>${project.build.testOutputDirectory}/minion</directory>
                        <outputDirectory>/opt/minion</outputDirectory>
                      </fileSet>
                    </fileSets>
                  </inline>
                </assembly>
                <healthCheck>
                  <interval>10s</interval>
                  <timeout>10s</timeout>
                  <retries>3</retries>
                  <cmd>/health.sh</cmd>
                </healthCheck>
              </build>
              <run>
                <cmd>-f</cmd>
                <env>
                  <TZ>America/New_York</TZ>
                  <JAVA_MIN_MEM>512M</JAVA_MIN_MEM>
                  <JAVA_MAX_MEM>2048M</JAVA_MAX_MEM>
                </env>
                <ports>
                  <port>minion-ssh.port:8201</port>
                </ports>
                <wait>
                  <healthy>true</healthy>
                  <time>600000</time>
                  <!--<time>120000</time>-->
                </wait>
                <network>
                  <mode>custom</mode>
                  <name>alarm-docker-it-network</name>
                  <alias>minion-host</alias>
                </network>
              </run>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>start-before-integration-test</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop-after-integration-test</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--                -->
      <!-- TEST EXECUTION -->
      <!--                -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <skipITs>${skipITs}</skipITs>
          <reuseForks>true</reuseForks>
          <useSystemClassLoader>false</useSystemClassLoader>
          <systemProperties>
            <property>
              <name>database.url</name>
              <value>jdbc:postgresql://localhost:${postgresql.port}/opennms</value>
            </property>
            <property>
              <name>keycloak.url</name>
              <value>http://localhost:${keycloak-http.port}</value>
            </property>
            <property>
              <name>application.base-url</name>
              <value>http://localhost:${karaf-http-port}</value>
            </property>
          </systemProperties>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
