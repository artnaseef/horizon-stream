<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.opennms.horizon</groupId>
        <artifactId>horizon-parent</artifactId>
        <version>0.1.0-SNAPSHOT</version>
        <relativePath>../parent-pom/pom.xml</relativePath>
    </parent>

    <groupId>org.opennms.horizon.alarmservice</groupId>
    <name>OpenNMS Horizon :: Alarm Service</name>
    <artifactId>alarm-service</artifactId>

    <properties>
        <skipITs>false</skipITs>
        <docker.image.name>opennms/horizon-stream-alarm</docker.image.name>
        <docker.image.tag>local</docker.image.tag>
        <skipJib>false</skipJib>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <dependency>
            <groupId>org.opennms.horizon.shared</groupId>
            <artifactId>events</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
        </dependency>
        <dependency>
            <groupId>com.swrve</groupId>
            <artifactId>rate-limited-logger</artifactId>
        </dependency>
        <dependency>
            <groupId>org.drools</groupId>
            <artifactId>drools-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.drools</groupId>
            <artifactId>drools-compiler</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kie</groupId>
            <artifactId>kie-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kie.soup</groupId>
            <artifactId>kie-soup-commons</artifactId>
        </dependency>
        <dependency>
            <groupId>org.kie.soup</groupId>
            <artifactId>kie-soup-maven-support</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.aries.jpa</groupId>
            <artifactId>org.apache.aries.jpa.api</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-picocontainer</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.10.1</version>
                        <configuration>
                            <source>${java.version}</source>
                            <target>${java.version}</target>
                            <annotationProcessorPaths>
                                <path>
                                    <groupId>org.projectlombok</groupId>
                                    <artifactId>lombok</artifactId>
                                    <version>${lombok.version}</version>
                                </path>
                                <!-- This is needed when using Lombok 1.18.16 and above -->
                                <path>
                                    <groupId>org.projectlombok</groupId>
                                    <artifactId>lombok-mapstruct-binding</artifactId>
                                    <version>0.2.0</version>
                                </path>
                                <!-- Mapstruct should follow the lombok path(s) -->
                                <path>
                                    <groupId>org.mapstruct</groupId>
                                    <artifactId>mapstruct-processor</artifactId>
                                    <version>${mapstruct.version}</version>
                                </path>
                            </annotationProcessorPaths>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
        <plugins>
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <configuration>
                    <skip>${skipJib}</skip>
                    <from>
                        <image>openjdk:11</image>
                    </from>
                    <to>
                        <image>${docker.image.name}:${docker.image.tag}</image>
                    </to>
                    <container>
                        <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
                    </container>
                </configuration>
                <executions>
                    <execution>
                        <id>build-docker-image</id>
<!--                        Must be in package phase before docker runs-->
                        <phase>package</phase>
                        <goals>
                            <goal>dockerBuild</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>


            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <skip>${skipITs}</skip>
                    <showLogs>true</showLogs>
                    <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
                    <images>

                        <!--                -->
                        <!-- POSTGRES IMAGE -->
                        <!--                -->
                        <image>
                            <name>postgres-it-image</name>
                            <alias>postgres</alias>
                            <build>
                                <!-- POSTGRES VERSION PROPERTY -->
                                <from>postgres:13.3-alpine</from>
                                <assembly>
                                    <targetDir>/</targetDir>
                                    <inline xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                        xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                                        xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
                                        <files>
                                            <file>
                                                <source>
                                                    ./target/test-classes/db-init.sql
                                                </source>
                                                <destName>db-init.sql</destName>
                                                <outputDirectory>/docker-entrypoint-initdb.d</outputDirectory>
                                            </file>
                                        </files>
                                    </inline>
                                </assembly>
                            </build>
                            <run>
                                <env>
                                    <POSTGRES_HOST_AUTH_METHOD>trust</POSTGRES_HOST_AUTH_METHOD>
                                </env>
                                <ports>
                                    <port>postgres-db-port:5432</port>
                                </ports>
                                <wait>
                                    <log>(?s)PostgreSQL init process complete; ready for start up..*database system is ready to accept connections</log>
                                    <time>120000</time>
                                </wait>
                                <ports>
                                    <port>postgresql.port:5432</port>
                                </ports>
                                <network>
                                    <mode>custom</mode>
                                    <name>alarm-docker-it-network</name>
                                    <alias>postgres</alias>
                                </network>
                            </run>
                        </image>

                        <!--                -->
                        <!-- KAFKA IMAGE -->
                        <!--                -->
                        <image>
                            <name>kafka-it-image</name>
                            <alias>kafka</alias>
                            <build>
                                <!-- POSTGRES VERSION PROPERTY -->
                                <from>blacktop/kafka:2.6</from>
                            </build>
                            <run>
                                <env>
                                    <KAFKA_ADVERTISED_HOST_NAME>kafka-host</KAFKA_ADVERTISED_HOST_NAME>
                                    <KAFKA_LISTENERS>LOCALCLIENT://:59092,CLIENT://:9092</KAFKA_LISTENERS>
                                    <KAFKA_ADVERTISED_LISTENERS>LOCALCLIENT://localhost:59092,CLIENT://kafka-host:9092</KAFKA_ADVERTISED_LISTENERS>
                                    <KAFKA_LISTENER_SECURITY_PROTOCOL_MAP>CLIENT:PLAINTEXT,LOCALCLIENT:PLAINTEXT</KAFKA_LISTENER_SECURITY_PROTOCOL_MAP>
                                    <KAFKA_INTER_BROKER_LISTENER_NAME>CLIENT</KAFKA_INTER_BROKER_LISTENER_NAME>
                                </env>
                                <ports>
                                    <port>kafka.port:9092</port>
                                </ports>
                                <wait>
                                    <log>(?s)started \(kafka.server.KafkaServer\)</log>
                                    <time>120000</time>
                                </wait>
                                <network>
                                    <mode>custom</mode>
                                    <name>alarm-docker-it-network</name>
                                    <alias>kafka-host</alias>
                                </network>
                            </run>
                        </image>

                        <!--                  -->
                        <!-- KAFKA-REST IMAGE -->
                        <!--                  -->
                        <image>
                            <name>kafka-rest-it-image</name>
                            <alias>kafka-rest</alias>
                            <build>
                                <from>confluentinc/cp-kafka-rest:7.3.0</from>
                            </build>
                            <run>
                                <env>
                                    <KAFKA_REST_BOOTSTRAP_SERVERS>kafka-host:9092</KAFKA_REST_BOOTSTRAP_SERVERS>
                                    <KAFKA_REST_LISTENERS>http://0.0.0.0:8080</KAFKA_REST_LISTENERS>
                                </env>
                                <ports>
                                    <port>kafka-rest.port:8080</port>
                                </ports>
                                <wait>
                                    <log>INFO Server started, listening for requests\.\.\. \(io.confluent.kafkarest.KafkaRestMain\)</log>
                                    <time>60000</time>
                                </wait>
                                <network>
                                    <mode>custom</mode>
                                    <name>alarm-docker-it-network</name>
                                    <alias>kafka-rest-host</alias>
                                </network>
                            </run>
                        </image>

                        <!--                          -->
                        <!-- ALARM APPLICATION IMAGE  -->
                        <!--                          -->
                        <image>
                            <name>opennms-horizon-application-it-image</name>
                            <alias>alarm-application</alias>
                            <build>
                                <from>${docker.image.name}:${docker.image.tag}</from>
                            </build>
                            <run>
                                <hostname>test-alarm-001</hostname>
                                <ports>
                                    <port>app-http-port:8080</port>
                                    <!--<port>5005:5005</port>-->
                                </ports>
                                <env>
                                    <!-- Need to make sure address=* is in the DEBUG OPTS otherwise it listens on the container's localhost only -->
                                    <JAVA_OPTS>-Djava.security.egd=file:/dev/./urandom
                                        -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
                                    </JAVA_OPTS>
                                    <SPRING_KAFKA_BOOTSTRAP_SERVERS>kafka-host:9092</SPRING_KAFKA_BOOTSTRAP_SERVERS>
                                </env>
                                <wait>
                                    <log>Started AlarmServiceMain in .* seconds</log>
                                    <time>300000</time>
                                </wait>
                                <network>
                                    <mode>custom</mode>
                                    <name>alarm-docker-it-network</name>
                                    <alias>alarm</alias>
                                </network>
                            </run>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>start-before-integration-test</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop-after-integration-test</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--                -->
            <!-- TEST EXECUTION -->
            <!--                -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.0.0-M5</version>
                <executions>
                    <execution>
                        <id>horizon-integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <phase>integration-test</phase>
                        <configuration>
                            <excludes>
                                <exclude>none</exclude>
                            </excludes>
                            <includes>
                                <include>**/*IT.java</include>
                            </includes>
                        </configuration>
                    </execution>

                    <!-- Fail the build on IT Failures.  Executed as a separate step so that post-integration-test -->
                    <!--  phase executes even after an IT failure.                                                 -->
                    <execution>
                        <id>horizon-verify-it</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skipITs>${skipITs}</skipITs>
                    <reuseForks>true</reuseForks>
                    <useSystemClassLoader>false</useSystemClassLoader>
                <systemProperties>
                    <property>
                        <name>application.base-url</name>
<!--                        <value>http://localhost:${karaf-http-port}</value>-->
                        <value>http://localhost:${app-http-port}</value>
                    </property>
                    <property>
                        <name>kafka.bootstrap-servers</name>
                        <value>localhost:${kafka.port}</value>
                    </property>
                    <property>
                        <name>kafka-rest.url</name>
                        <value>http://localhost:${kafka-rest.port}</value>
                    </property>
                </systemProperties>
                </configuration>
            </plugin>

        </plugins>
    </build>


</project>
